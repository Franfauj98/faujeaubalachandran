// Generated by dia2code
#ifndef STATE__OBSERVABLE__H
#define STATE__OBSERVABLE__H

#include <vector>
#include <memory>

namespace state {
  class Map;
  class Observable;
  class Units;
  class UnitsObserver;
  class BuildingsObserver;
}

#include "Map.h"
#include "Units.h"
#include "UnitsObserver.h"
#include "BuildingsObserver.h"

namespace state {

  /// class Observable - 
  class Observable {
    // Associations
    // Attributes
  private:
    Map allMaps;
    std::vector<std::unique_ptr<Units>> ressurectionElement;
    std::vector<int> ressurectionId;
    // Operations
  public:
    ~Observable ();
    void notifyObserver (state::Observable& observable, int position, int idToChange, int action, int unitToCreate, int position2) const;
    void notifyObserverPrev (state::Observable& observable, int position, int idToChange, int action, int unitToDestroy, int position2) const;
    Observable ();
    Map& getAllMaps ();
    std::vector<std::unique_ptr<Units>>& getRessurectionElement ();
    void setRessurectionElement (std::vector<std::unique_ptr<Units>>& ressurectionElement);
    std::vector<int> getRessurectionId ();
    void setRessurectionId (std::vector<int> reId);
    // Setters and Getters
  };

};

#endif
