// Generated by dia2code
#ifndef STATE__BARRACK__H
#define STATE__BARRACK__H

#include <memory>

namespace state {
  class Position;
  class BuildingCost;
  class Cavalier;
  class Decurion;
  class Catapult;
  class Arrow;
  class Buildings;
}

#include "Position.h"
#include "BuildingCost.h"
#include "IdTexture.h"
#include "Buildings.h"

namespace state {

  /// class Barrack - 
  class Barrack : public state::Buildings {
    // Attributes
  private:
    int capacity;
    int unitsNumber;
    // Operations
  public:
    Barrack ();
    Barrack (int id, Position position, int level);
    Barrack (int capacity, int id, Position position, int level, BuildingCost barrackCost, IdTexture idTexture = BARRACK, int life = 0);
    virtual ~Barrack ();
    int getCapacity () const;
    void setCapacity (const int capacity);
    int  getUnitsNumber () const;
    void setUnitsNumber (const int unitsNumber);
    /// switch case for units level. 
    /// @param level		(???) 
    /// @param position		(???) 
    /// @param id		(???) 
    std::unique_ptr<Element> createArrow (int level, Position position, int id);
    /// switch case for units level. 
    /// @param level		(???) 
    /// @param position		(???) 
    /// @param id		(???) 
    Cavalier* createCavalier (int level, Position position, int id);
    /// switch case for units level. 
    /// @param level		(???) 
    /// @param position		(???) 
    /// @param id		(???) 
    Decurion* createDecurion (int level, Position position, int id);
    Catapult* createCatapult (int level, Position position, int id);
    void destructArrow (Arrow* arrow);
    void destructCavalier (Cavalier* cavalier);
    void destructDecurion (Decurion* decurion);
    void destructCatapult (Catapult* catapult);
    // Setters and Getters
  };

};

#endif
